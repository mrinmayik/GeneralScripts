#!/bin/tcsh

#This script is got from the afni demos distributed at the Milwaukee AFNI Bootcamp.
#It has been modified by Mrinmayi Kulkarni (mrinmayi@uwm.edu) to make it usable across projects
#Any lines that have been modified have a #modified comment so that my stupidity is not mistaken for
#the original script

#The following modifications have been made in this script:
#   1. An additional argument that takes in the name of the anat is added here. This argument is now
#       required.
#	2. Existence of this file and argument is verified before running SSwarper
#	3. The name is passed to c.ss.1.sswarper. c.ss.1.sswarper has been accordingly modified to expect this
#		as an argument


# ===================== based on S.0.template.txt ======================

# Run @SSwarper for a subject list passed on the command line.

# Now, build a script of commands to run.

# ======================================================================
# init variables and allow command line options:
#    script_dir, study_root_in, study_root_out, deriv_dir,
#    all_subjects, nsubj
# Note that script_dir will need to be set basically every
#      time, since calling 'init_vars' will be universal.

# --------------------------------------------------
# variables to propagate to other scripts (always pass)

# the location of processing scripts (use full path)
set script_dir = `pwd`

# verbosity level
set verb = 0

set redo = 0

# are we swarming this?
set swarm = 0

# --------------------------------------------------
# variables specifiec to this script

# the name of this script
set prog = `basename $0`

# list of subjects to process
set subj_proc_list = ()

# processing directory that goes under derivatives
set proc_dir = AFNI_01_SSwarper

# ======================================================================
# process command-line arguments
set ac = 1
while ( $ac <= $#argv )
   if ( "$argv[$ac]" == "-help" ) then
      echo "$prog       - run @SSwarper for the given subjects"
      echo ""
      echo "usage: $prog [options...] subj subj ..."
      echo ""
      echo "options specific to this script"
      echo ""
      echo "  -proc_dir DIR     : root directory under 'derivates' for results"
      echo "                      default: $proc_dir"
      echo ""
      echo "general options"
      echo ""
      echo "  -help             : show help and exit"
      echo "  -verb LEVEL       : set verbosity level (2 means show commands)"
      echo "                      default: $verb"
      echo "  -redo             : (delete previous and) re-create results"
      echo "  -script_dir DIR   : specify directory of processing scripts"
      echo "                      default: $script_dir"
      echo "  -swarm            : will we swarm this process"
	  echo "  -anat_name NAME	: Name of file that will be passed to SSwarper" # modified
      echo ""
      exit 0
   else if ( "$argv[$ac]" == "-proc_dir" ) then
      @ ac ++
      if ( $ac > $#argv ) then
         echo "** -proc_dir: missing argument"
         exit 1
      endif
      set proc_dir = $argv[$ac]
   else if ( "$argv[$ac]" == "-redo" ) then
      set redo = 1
   else if ( "$argv[$ac]" == "-script_dir" ) then
      @ ac ++
      if ( $ac > $#argv ) then
         echo "** -script_dir: missing argument"
         exit 1
      endif
      set script_dir = $argv[$ac]
   else if ( "$argv[$ac]" == "-swarm" ) then
      set swarm = 1
   else if ( "$argv[$ac]" == "-verb" ) then
      @ ac ++
      if ( $ac > $#argv ) then
         echo "** -verb: missing argument"
         exit 1
      endif

      # if 2 or more, set echo to see commands
      if ( $verb >= 2 ) set echo
   # modified
   else if ( "$argv[$ac]" == "-anat_name" ) then
      @ ac ++
      if ( $ac > $#argv ) then
         echo "** -anat_name: missing argument"
         exit 1
      endif
	  set anat_name = $argv[$ac]
   # modfication ends
   else
      # everything else should be a subject
      set subj_proc_list = ( $argv[$ac-] )
      break
   endif

   @ ac ++
end

# source the variable init file (to keep them mostly in one place)
# sets: study_root_in, study_root_out, deriv_dir, all_subjects, nsubj
source $script_dir/c.0.init_vars

# ======================================================================
# do some work...

echo "== time == starting : `date`"

# if subj_proc_list was not initialized, process everyone
if ( $#subj_proc_list == 0 ) then
   set subj_proc_list = ( $all_subjects )
   echo "++ $prog : processing all subjects"
endif
echo "-- $prog : processing $#subj_proc_list subjects"
echo "-- $prog : processing the following subjects $subj_proc_list" # modified
echo "" # modified

# input directory will be for the de-obliqued results under derivatives
set in_dir = $study_root_in

# output directory will be derivates/$proc_dir
set res_dir = $deriv_dir/$proc_dir
echo "-- $prog : results will go under $res_dir"

# for each subject, mask sure they exist
set missing = 0
set done    = 0
set todo    = 0
set nredo   = 0
set subjs_todo = ()
foreach sid ( $subj_proc_list )
   # if redo, delete old
   if ( $redo &&  -d $res_dir/$sid ) then
      echo "-- deleting subject $sid for re-run"
      @ nredo += 1
      \rm -fr $res_dir/$sid
   endif

   if ( ! -f $in_dir/$sid/anat/$anat_name ) then # modified
      @ missing += 1
   else if ( -d $res_dir/$sid ) then
      echo "-- yay, already done with subject $sid"
      @ done += 1
   else
      set subjs_todo = ( $subjs_todo $sid )
      @ todo += 1
   endif
end

echo ""
echo "-- $prog subjects: $missing missing, $done already done, $todo todo"
echo "                   $nredo redo"
echo ""

# allow missing subjects?  seems like an error, but there could be reasons
if ( $missing > 0 ) then
   echo "** $prog : will not proceed if any subjects are missing"
   exit 1
endif


# now either write a swarm script or directly fire off the process

# prep for swarm
if ( $swarm ) then
   mkdir -p $script_dir/out/run.sswarper
   cd $script_dir/out/run.sswarper
   set swarmfile = swarm.sswarper
   echo -n "" >! $swarmfile
endif

# big finish, actually process some data
foreach sid ( $subjs_todo )
   # input data comes from the deoblique tree under derivatives
   # slurm takes: SID INDATA_ROOT RUN_SCRIPT OUTDATA_ROOT ...
   # $in_dir and $res_dir were set in checking for inputs and results
   set cmd = ( tcsh $script_dir/b.slurm $sid $in_dir \
                    $script_dir/c.ss.1.sswarper $res_dir $anat_name ) # modified

   # either write to swarm file or just run
   if ( $swarm ) then
      echo $cmd >> $swarmfile
   else
      echo "++ running: $cmd"
      $cmd
   endif
end


# possibly run swarm command
if ( $swarm ) then
   echo ""
   echo "++ swarming $#subjs_todo subjects via file $swarmfile"
   echo ""
   # 12 hours, 6 GB RAM, 10 GB scratch, 4 threads
   swarm -f $swarmfile                          \
        -g 6 -t 4                               \
        --time 12:00:00 --gres=lscratch:10      \
        --verbose 2                             \
        --module afni                           \
        --merge-output

   # tcsh p.1.sswarper -redo -swarm
   #
   # jobload
   # squeue -u $USER
   # scancel --user=$USER
endif

echo "== time == finished: `date`"
